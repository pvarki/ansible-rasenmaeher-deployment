- name: Deploy RM | Build RM locally if so is desired
  when: build_locally == 'true'
  block:
    - name: Check if Docker Compose containers are already built
      ansible.builtin.shell:
        cmd: docker compose -f /home/{{ ansible_user }}/docker-rasenmaeher-integration/docker-compose-local.yml -f /home/{{ ansible_user }}/docker-rasenmaeher-integration/docker-compose-dev.yml images | grep 'None'
      register: docker_images_check
      ignore_errors: true
      changed_when: false

    - name: Debug environment variable values
      ansible.builtin.shell:
        cmd: | 
          env > /home/{{ ansible_user }}/env_output.log
        chdir: "/home/{{ ansible_user }}/docker-rasenmaeher-integration"
      environment: 
        KEYCLOAK_DATABASE_PASSWORD: "{{ secrets.keycloak_database_password }}"
        RM_DATABASE_PASSWORD: "{{ secrets.rm_database_password }}"
        POSTGRES_PASSWORD: "{{ secrets.postgres_password }}"
        LDAP_ADMIN_PASSWORD: "{{ secrets.ldap_admin_password }}"
        KEYCLOAK_ADMIN_PASSWORD: "{{ secrets.keycloak_admin_password }}"
        KEYCLOAK_MANAGEMENT_PASSWORD: "{{ secrets.keycloak_management_password }}"
        TAK_DATABASE_PASSWORD: "{{ secrets.tak_database_password }}"
        SERVER_DOMAIN: "{{ server_domain }}"
        CFSSL_CA_NAME: "{{ cfssl_ca_name }}"
        MW_LE_EMAIL: "{{ mw_le_email }}"
        MW_LE_TEST: "{{ mw_le_test }}"
        TAKSERVER_CERT_PASS: "{{ secrets.takserver_cert_pass }}"
        TAK_CA_PASS: "{{ secrets.tak_ca_pass }}"
      become: no

    - name: Deploy RM | Build Docker Compose project when local and log output
      when: build_locally == 'true' and docker_images_check.stdout != ''
      ansible.builtin.shell:
        cmd: |
          docker compose -p rmdev -f /home/{{ ansible_user }}/docker-rasenmaeher-integration/docker-compose-local.yml -f /home/{{ ansible_user }}/docker-rasenmaeher-integration/docker-compose-dev.yml build > /home/{{ ansible_user }}/compose_output.log 2>&1
        chdir: "/home/{{ ansible_user }}/docker-rasenmaeher-integration"
      timeout: 900
      become: yes
      register: build_job

    - name: Fetch log
      ansible.builtin.shell:
        cmd: cat /home/{{ ansible_user }}/compose_output.log
      register: log_output

    - name: Deploy RM | Output final portion of logs
      ansible.builtin.debug:
        msg: "{{ log_output.stdout_lines }}"

    - name: Create .env file for Docker Compose
      ansible.builtin.copy:
        dest: "/home/{{ ansible_user }}/docker-rasenmaeher-integration/.env"
        content: |
          KEYCLOAK_DATABASE_PASSWORD={{ secrets.keycloak_database_password }}
          RM_DATABASE_PASSWORD={{ secrets.rm_database_password }}
          POSTGRES_PASSWORD={{ secrets.postgres_password }}
          LDAP_ADMIN_PASSWORD={{ secrets.ldap_admin_password }}
          KEYCLOAK_ADMIN_PASSWORD={{ secrets.keycloak_admin_password }}
          KEYCLOAK_MANAGEMENT_PASSWORD={{ secrets.keycloak_management_password }}
          TAK_DATABASE_PASSWORD={{ secrets.tak_database_password }}
          SERVER_DOMAIN={{ server_domain }}
          CFSSL_CA_NAME={{ cfssl_ca_name }}
          MW_LE_EMAIL={{ mw_le_email }}
          MW_LE_TEST={{ mw_le_test }}
          TAKSERVER_CERT_PASS={{ secrets.takserver_cert_pass }}
          TAK_CA_PASS={{ secrets.tak_ca_pass }}
        force: yes
      become: yes
      notify: restart docker-compose

    - name: Ensure correct ownership and permissions for .env file
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/docker-rasenmaeher-integration/.env"
        owner: "{{ ansible_user }}"
        group: docker
        mode: '0640'
      become: yes

    - name: Deploy RM | Start Docker Compose in detached mode
      community.docker.docker_compose_v2:
        project_name: rmdev
        project_src: "/home/{{ ansible_user }}/docker-rasenmaeher-integration"
        files:
          - docker-compose-local.yml
          - docker-compose-dev.yml
        state: present
        pull: never 
        recreate: always
      become: yes
      register: compose_background

    - name: Delay before health check
      ansible.builtin.pause:
        seconds: 30

    - name: Check and manage container health
      block:
        - name: Check container health status
          ansible.builtin.shell:
            cmd: docker ps --filter "status=unhealthy" --format "{{ '{{.Names}}' }}"
          register: unhealthy_containers
          until: unhealthy_containers.stdout_lines == []
          retries: 10
          delay: 30 
          ignore_errors: true

        - name: Restart unhealthy containers
          ansible.builtin.shell:
            cmd: docker restart {{ item }}
          loop: "{{ unhealthy_containers.stdout_lines }}"
          when: unhealthy_containers.stdout_lines | length > 0
          register: restart_status

        - name: Debug restart status
          ansible.builtin.debug:
            var: restart_status
          when: compose_background is defined

    - name: Deploy RM | Fetch log
      ansible.builtin.shell:
        cmd: cat /home/{{ ansible_user }}/compose_output.log
      register: log_output

    - name: Deploy RM | Output final portion of logs
      ansible.builtin.debug:
        msg: "{{ log_output.stdout_lines }}"

- name: Deploy RM | Deploy Docker Compose from remote repository
  when: build_locally == 'false'
  block:
    - name: Deploy RM | Pull Docker Compose images
      ansible.builtin.shell:
        cmd: |
          docker compose -f /home/{{ ansible_user }}/docker-rasenmaeher-integration/docker-compose.yml pull > /home/{{ ansible_user }}/compose_output.log 2>&1
        chdir: "/home/{{ ansible_user }}/docker-rasenmaeher-integration"
      become: false
      ignore_errors: true

    - name: Create .env file for Docker Compose
      ansible.builtin.copy:
        dest: "/home/{{ ansible_user }}/docker-rasenmaeher-integration/.env"
        content: |
          KEYCLOAK_DATABASE_PASSWORD={{ secrets.keycloak_database_password }}
          RM_DATABASE_PASSWORD={{ secrets.rm_database_password }}
          POSTGRES_PASSWORD={{ secrets.postgres_password }}
          LDAP_ADMIN_PASSWORD={{ secrets.ldap_admin_password }}
          KEYCLOAK_ADMIN_PASSWORD={{ secrets.keycloak_admin_password }}
          KEYCLOAK_MANAGEMENT_PASSWORD={{ secrets.keycloak_management_password }}
          TAK_DATABASE_PASSWORD={{ secrets.tak_database_password }}
          SERVER_DOMAIN={{ server_domain }}
          CFSSL_CA_NAME={{ cfssl_ca_name }}
          MW_LE_EMAIL={{ mw_le_email }}
          MW_LE_TEST={{ mw_le_test }}
          TAKSERVER_CERT_PASS={{ secrets.takserver_cert_pass }}
          TAK_CA_PASS={{ secrets.tak_ca_pass }}
        force: yes
      become: yes
      notify: restart docker-compose

    - name: Ensure correct ownership and permissions for .env file
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/docker-rasenmaeher-integration/.env"
        owner: "{{ ansible_user }}"
        group: docker
        mode: '0640'
      become: yes


    - name: Deploy RM | Start Docker Compose in detached mode
      community.docker.docker_compose_v2:
        project_name: rmdev
        project_src: "/home/{{ ansible_user }}/docker-rasenmaeher-integration"
        files:
          - docker-compose-local.yml
          - docker-compose-dev.yml
        state: present
        pull: never 
        recreate: always
      become: yes
      register: compose_background

    - name: Delay before health check
      ansible.builtin.pause:
        seconds: 30  # Adjust the delay as needed to allow services to stabilize

    - name: Check and manage container health
      block:
        - name: Check container health status
          ansible.builtin.shell:
            cmd: docker ps --filter "health=unhealthy" --format "{{ '{{.Names}}' }}"
          register: unhealthy_containers
          until: unhealthy_containers.stdout_lines == []
          retries: 10  # Adjust based on how many times you want to retry
          delay: 30   # Delay between retries, adjust based on expected recovery times
          ignore_errors: true

        - name: Restart unhealthy containers
          ansible.builtin.shell:
            cmd: docker restart {{ item }}
          loop: "{{ unhealthy_containers.stdout_lines }}"
          when: unhealthy_containers.stdout_lines | length > 0
          register: restart_status

        - name: Debug restart status
          ansible.builtin.debug:
            var: restart_status
          when: compose_background is defined

    - name: Deploy RM | Fetch log
      ansible.builtin.shell:
        cmd: cat /home/{{ ansible_user }}/compose_output.log
      register: log_output

    - name: Deploy RM | Output final portion of logs
      ansible.builtin.debug:
        msg: "{{ log_output.stdout_lines }}"
